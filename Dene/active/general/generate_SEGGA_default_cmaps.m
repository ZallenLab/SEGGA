function SEGGA_default_cmaps = generate_SEGGA_default_cmaps(sname)

if nargin <1 || isempty(sname)
%     if isdeployed()
%         base_dir = ctfroot();
%     end
	base_dir = fileparts(mfilename('fullpath'));
    savename = [base_dir,filesep,'SEGGA_default_cmaps'];
else
    savename = sname;
end
% visualize_multiple_colmaps(savename)
%cmd has been deactivated below, remove 'return'
%or run 'visualize_multiple_colmaps(savename)' after generating color maps
% to view the colormaps that are created


% cpickerH = custom_colorpicker_02(ncolors,callingfig,handles,...
%                     mapped_numbers,colorInput,cbar_txt,...
%                     continuous_vals,expr_input,outside_loop_expr);

%%%Continuous Color Maps
% custom_colorpicker_02(2)
SEGGA_default_cmaps = [];

%%% 1. Area Derivative
ncolors = 3;
mapped_numbers = [];
colorInput = [1 0 0; 0 0 0; 0 0 1];
cbar_txt = 'Area Derivative';
% continuous_vals = 0:0.01:1;
contin_val_expr = '0:0.01:1';
eval(['continuous_vals =', contin_val_expr,';']);
expr_input =    ['cell_cdata = min(max(round((area_derivs(i,data.cells.selected(i,:))-',...
    'minnum)/intrval),1),',num2str(numel(continuous_vals)),');'];
outside_loop_expr = ['area_derivs = smoothen(deriv(data.cells.area));',...
                     'one_std = std(area_derivs(data.cells.selected))*3;',...
                     'minnum = -0.75*one_std;',...
                     'maxnum = 0.75*one_std;',...
                     'midnum = 0;'];
name = 'dArea';
discrete_bool = false;
xticklabels = {'shrinking','growing'};
alpha_value = 0.5;
cmap_style = 'linear';
SEGGA_default_cmaps = build_SEGGA_default_cmaps(SEGGA_default_cmaps,name,ncolors,discrete_bool,mapped_numbers,...
                                colorInput,cbar_txt,contin_val_expr,xticklabels,...
                                expr_input,outside_loop_expr,alpha_value,cmap_style);
                
%%% 2. Area
min_area = 50;
max_area = 1250;
ncolors = 3;
%%% Setting mapped numbers to empty, to recalculate automatically
% mapped_numbers = [min_area,round((max_area-min_area)/2)+min_area,max_area];
mapped_numbers = [];
colorInput = [1 0 0; 0.75 0 0.75; 0 0 1];
cbar_txt = 'Area';
% continuous_vals = min_area:max_area;
% contin_val_expr = [num2str(min_area),':',num2str(max_area),';'];
contin_val_expr = '0:0.01:1';
expr_input = ['cell_cdata = min(max(round((data.cells.area(i,data.cells.selected(i,:))-',...
               'minnum)/intrval),1),',num2str(numel(continuous_vals)),');'];
           
outside_loop_expr = [...
'all_areas = data.cells.area(data.cells.selected);',...
'minnum = mean(all_areas)-2*std(all_areas);',...
'maxnum = mean(all_areas)+2*std(all_areas);',...
'intrval = (maxnum-minnum)/100;'];
name = 'Area';
discrete_bool = false;
xticklabels = {'small','large'};
SEGGA_default_cmaps = build_SEGGA_default_cmaps(SEGGA_default_cmaps, name,ncolors, discrete_bool, mapped_numbers,...
                                colorInput, cbar_txt, contin_val_expr, xticklabels, expr_input, outside_loop_expr);
                            
%%% 3. L/W
smooth_bool = true; %set to false to remove smoothing, then re-generate cmaps file
ncolors = 3;
mapped_numbers = [];
% colorInput = [242 3 238;...
%               0 0 0;
%               20 242 6]./255;
colorInput = [1 0 0;...
              0 0 0;
              0 1 1];
cbar_txt = 'Cell Length Width Ratio (hor/ver)';
% continuous_vals = 0:0.01:1;
contin_val_expr = '0:0.01:1;';
name = 'LW_ratio';
discrete_bool = false;
xticklabels = {'tall','wide'};
outside_loop_expr = [...
'big_len_width = NaN(size(data.cells.selected));',...
'hor_ver_ratio_all = [];',...
'for i = 1:length(seq.frames)',...
    'geom = seq.frames(i).cellgeom;',...
    'l_cells = nonzeros(seq.cells_map(i, data.cells.selected(i, :)));',...
	'faces = geom.faces(l_cells, :);',...
    'faces_for_area = faces2ffa(faces);',...
    '[cell_L1, cell_L2, cell_angle, ~] = cell_ellipse(geom.nodes, faces_for_area);',...           
    'hor = sqrt((cell_L1 .* cosd(cell_angle)).^2 + (cell_L2 .* sind(cell_angle)).^2);',...
    'ver = sqrt((cell_L1 .* sind(cell_angle)).^2 + (cell_L2 .* cosd(cell_angle)).^2);',...
    'hor_ver_ratio = log2(hor./ver);',...
    'perframe(i).hor_ver_ratio = hor_ver_ratio;',...
    'hor_ver_ratio_all = [hor_ver_ratio_all;perframe(i).hor_ver_ratio];',...
    'globs = seq.inv_cells_map(i, l_cells);',...
    'big_len_width(i,globs) = hor_ver_ratio;',...
'end;',...
'big_len_width = smoothen(big_len_width);',...
'if ',num2str(smooth_bool),' hor_ver_ratio_all = big_len_width(data.cells.selected);',' end; ',...
'minnum = mean(hor_ver_ratio_all(:))-2*std(hor_ver_ratio_all(:));',...
'maxnum = mean(hor_ver_ratio_all(:))+2*std(hor_ver_ratio_all(:));',...
'intrval = (maxnum-minnum)/100;'];
eval(['continuous_vals =',contin_val_expr]);

if smooth_bool
   expr_input = ['tmp_hv = big_len_width(i,data.cells.selected(i,:));',...
                 'cell_cdata = min(max(round((tmp_hv-',...
                 'minnum)/intrval),1),',num2str(numel(continuous_vals)),');']; 
else
    expr_input = ['cell_cdata = min(max(round((perframe(i).hor_ver_ratio-',...
                   'minnum)/intrval),1),',num2str(numel(continuous_vals)),');'];
end
SEGGA_default_cmaps = build_SEGGA_default_cmaps(SEGGA_default_cmaps,name,ncolors,discrete_bool,mapped_numbers,...
                                colorInput,cbar_txt,contin_val_expr,xticklabels,...
                                expr_input,outside_loop_expr);
                            
                            
%%% 4. Eccentricity
ncolors = 4;
mapped_numbers = [];
colorInput = [0 0 0;...
              7 53 2;
              17  125 9;
              27 255 9]./255;
cbar_txt = 'Eccentricity';
% continuous_vals = 0:0.01:1;
contin_val_expr = '0:0.01:1;';
eval(['continuous_vals =', contin_val_expr]);
name = 'Eccentricity';
discrete_bool = false;
outside_loop_expr = [...
'for i = 1:length(seq.frames)',...
    'geom = seq.frames(i).cellgeom;',...
    'l_cells = nonzeros(seq.cells_map(i, data.cells.selected(i, :)));',...
	'faces = geom.faces(l_cells, :);',...
    'faces_for_area = faces2ffa(faces);',...
    '[cell_L1, cell_L2, cell_angle, ~] = cell_ellipse(geom.nodes, faces_for_area);',...           
    'ecc = realsqrt(1 - (cell_L2 ./ cell_L1).^2);',...
    'perframe(i).ecc = ecc;',...
'end;',...
'ecc_all = [];',...
'for i = 1:length(seq.frames) ',...
    'ecc_all = [ecc_all;perframe(i).ecc];',...
'end;',...
'minnum = 0;',...
'maxnum = mean(ecc_all(:))+2*std(ecc_all(:));',...
'intrval = (maxnum-minnum)/100;'...
];

% 'minnum = mean(ecc_all(:))-2*std(ecc_all(:));',...

expr_input = ['cell_cdata = min(max(round((perframe(i).ecc-',...
               'minnum)/intrval),1),',num2str(numel(continuous_vals)),');'];
xticklabels = {'isotropic','anisotropic'};
SEGGA_default_cmaps = build_SEGGA_default_cmaps(SEGGA_default_cmaps,name,ncolors,discrete_bool,mapped_numbers,...
                                colorInput,cbar_txt,contin_val_expr,xticklabels,...
                                expr_input,outside_loop_expr);
                            
                            
%%% 5. Pattern Deformation
ncolors = 4;
mapped_numbers = [];
colorInput = [0 0 0;...
              77 0 77;
              164 4 164;
              255 11 255]./255;
cbar_txt = 'Pattern Deformation';
% continuous_vals = 0:0.01:1;
contin_val_expr = '0:0.01:1;';
eval(['continuous_vals =', contin_val_expr]);
name = 'Pat_Defo';
discrete_bool = false;
xticklabels = {'low','high'};
outside_loop_expr = [...
'big_pat_defo = NaN(size(data.cells.selected));',...
'for i = 1:length(seq.frames)',...
    'geom = seq.frames(i).cellgeom;',...
    'l_cells = nonzeros(seq.cells_map(i, data.cells.selected(i, :)));',...    
    '[~,temp_pat_defo]  = pattern_defo_graner(geom, l_cells'');',...           
    'globs = seq.inv_cells_map(i, l_cells);',...
    'big_pat_defo(i,globs) = temp_pat_defo;',...
'end;',...
'big_pat_defo = smoothen(big_pat_defo);',...
'all_pd = big_pat_defo(~isnan(big_pat_defo));',...
'minnum = 1;',...
'maxnum = mean(all_pd(:))+2*std(all_pd(:));',...
'midnum = (maxnum-minnum)/2+minnum;',...
'intrval = (maxnum-minnum)/100;'];

% 'minnum = mean(all_pd(:))-2*std(all_pd(:));',...

expr_input = ['cell_cdata = min(max(round((squeeze(big_pat_defo(i,seq.inv_cells_map(i, nonzeros(seq.cells_map(i, data.cells.selected(i, :))))))-',...
                  'minnum)/intrval),1),',num2str(numel(continuous_vals)),');'];
SEGGA_default_cmaps = build_SEGGA_default_cmaps(SEGGA_default_cmaps,name,ncolors,discrete_bool,mapped_numbers,...
                                colorInput,cbar_txt,contin_val_expr,xticklabels,...
                                expr_input,outside_loop_expr);

                            
qVal_map_bool = false;
if qVal_map_bool
    %%% 6. Q Value
    ncolors = 2;
    mapped_numbers = [];
    colorInput = [0 0 0;...
                  4 255 255]./255;
    cbar_txt = 'q Value (perimeter/sqrt(area))';
    % continuous_vals = 0:0.01:1;
    contin_val_expr = '0:0.01:1;';
    eval(['continuous_vals =', contin_val_expr]);
    name = 'q_value';
    outside_loop_expr = [...
    'qVal = data.cells.peri./realsqrt(data.cells.area);',...
    'qVal_all = [];',...
    'for i = 1:length(seq.frames)',...
        'temp_qVal = qVal(i, data.cells.selected(i, :));',...
        'qVal_all = [qVal_all,temp_qVal];',...
    'end;',...
    'minnum = min(qVal_all);',...
    'maxnum = max(qVal_all);',...
    'stdnum = std(qVal_all);',...
    'meannum = mean(qVal_all);',...
    'minnum = meannum - stdnum;',...
    'maxnum = meannum + stdnum;',...
    'intrval = (maxnum-minnum)/100;',...
    ];
    expr_input = ['cell_cdata = min(max(round((qVal(i,data.cells.selected(i,:))-',...
                   'minnum)/intrval),1),',num2str(numel(continuous_vals)),');'];
    discrete_bool = false;
    xticklabels = {'circle = 3.54','hexagon = 3.72','fluid > 3.81'};
    SEGGA_default_cmaps = build_SEGGA_default_cmaps(SEGGA_default_cmaps,name,ncolors,discrete_bool,mapped_numbers,...
                                    colorInput,cbar_txt,contin_val_expr,xticklabels,...
                                    expr_input,outside_loop_expr);

    % circle_q = 2*pi/(pi)^(1/2);
    % hex_q = 6/((3*(3)^(1/2)/2)^(1/2));
    % fluidity: http://arxiv.org/pdf/1509.06578v3.pdf;
end
                            
%%% 7a. Polarity #1
ncolors = 3;
mapped_numbers = [];
colorInput = [1 0 1; 0 0 0; 0 1 0];
cbar_txt = 'Polarity #1';
% continuous_vals = 0:0.01:1;
contin_val_expr = '[-20,0:0.01:1,20];';
name = 'Polarity #1';
discrete_bool = false;
xticklabels = {'horizontal','vertical'};
outside_loop_expr =['[initial_success, incrvals, pol_cells, polarityfiletype, chan_num] = ',...
                    'polarity_annotation_initial_step();',...
                    'if ~initial_success ',...
                    'display(''initial setup did not work'');',...
                    'return;',...
                    'end;',...
                    'cells = find(any(data.cells.selected));',...
                    'setappdata(handles.figure1,''running_polarity_bool'',true);',...
                    'minnum = incrvals(2);',...
                    'maxnum = incrvals(end-1);',...
                    'midnum = 0;',...
                    'mapped_numbers = [minnum,midnum,maxnum];',...
                    'intrval = (maxnum-minnum)/100;',...
                    'continuous_vals = [incrvals(1),minnum:intrval:maxnum,incrvals(end)];'];
expr_input = ['temp_local_cells = seq.cells_map(i,cells(:));',...
              'pos_inds = find(temp_local_cells);',...
              'tempcellpols = pol_cells(i, pos_inds);',...
              'temp_pol_inds = ~isnan(tempcellpols);',...
              '[~,bin] = histc(tempcellpols(temp_pol_inds),continuous_vals);',...
              'bin(bin==0) = floor(length(continuous_vals)/2);',...
              'cell_passed_thru = pos_inds(temp_pol_inds);',...
              'cell_did_not_pass = pos_inds(~temp_pol_inds);'];
alpha_value = 0.4;
cmap_style = 'cubic';
SEGGA_default_cmaps = build_SEGGA_default_cmaps(SEGGA_default_cmaps,name,ncolors,discrete_bool,mapped_numbers,...
                                colorInput,cbar_txt,contin_val_expr,xticklabels,...
                                expr_input,outside_loop_expr,alpha_value,cmap_style);
                            
%%% 7b. Polarity #2
ncolors = 3;
mapped_numbers = [];
colorInput = [0 0 1; 1 1 1; 1 0 0];
cbar_txt = 'Polarity #2';
% continuous_vals = 0:0.01:1;
contin_val_expr = '[-20,0:0.01:1,20];';
name = 'Polarity #2';
discrete_bool = false;
xticklabels = {'horizontal','vertical'};
outside_loop_expr =['[initial_success, incrvals, pol_cells, polarityfiletype, chan_num] = ',...
                    'polarity_annotation_initial_step();',...
                    'if ~initial_success ',...
                    'display(''initial setup did not work'');',...
                    'return;',...
                    'end;',...
                    'cells = find(any(data.cells.selected));',...
                    'setappdata(handles.figure1,''running_polarity_bool'',true);',...
                    'minnum = incrvals(2);',...
                    'maxnum = incrvals(end-1);',...
                    'midnum = 0;',...
                    'mapped_numbers = [minnum,midnum,maxnum];',...
                    'intrval = (maxnum-minnum)/100;',...
                    'continuous_vals = [incrvals(1),minnum:intrval:maxnum,incrvals(end)];'];
expr_input = ['temp_local_cells = seq.cells_map(i,cells(:));',...
              'pos_inds = find(temp_local_cells);',...
              'tempcellpols = pol_cells(i, pos_inds);',...
              'temp_pol_inds = ~isnan(tempcellpols);',...
              '[~,bin] = histc(tempcellpols(temp_pol_inds),continuous_vals);',...
              'bin(bin==0) = floor(length(continuous_vals)/2);',...
              'cell_passed_thru = pos_inds(temp_pol_inds);',...
              'cell_did_not_pass = pos_inds(~temp_pol_inds);'];
SEGGA_default_cmaps = build_SEGGA_default_cmaps(SEGGA_default_cmaps,name,ncolors,discrete_bool,mapped_numbers,...
                                colorInput,cbar_txt,contin_val_expr,xticklabels,...
                                expr_input,outside_loop_expr);
                            
%%%Discrete Color Maps
%%% 8a. Topology
ncolors = 5;
mapped_numbers = [4,5,6,7,8];
colorInput = [0   154 9;
              240 237 24;
              88  91  84;
              32  78  226;
              160  57  255]./255;
cbar_txt = 'Topology';
contin_val_expr = '[];';
name = 'Topology';
discrete_bool = true;
xticklabels = {num2str((4:8)')};
expr_input = 'cell_cdata = data.cells.num_sides(i,data.cells.selected(i,:));';
SEGGA_default_cmaps = build_SEGGA_default_cmaps(SEGGA_default_cmaps,name,ncolors,discrete_bool,mapped_numbers,...
                                colorInput,cbar_txt,contin_val_expr,xticklabels,expr_input);
                            
% %%% 8b. Topology #2
% ncolors = 5;
% mapped_numbers = [4,5,6,7,8];
% colorInput = [255 0 0;
%               242 236 18;
%               150 150 150;
%               0 211 0;
%               0 162 255]./255;
% cbar_txt = 'Topology #2';
% contin_val_expr = '[];';
% name = 'Topology #2';
% discrete_bool = true;
% xticklabels = {num2str((4:8)')};
% expr_input = 'cell_cdata = data.cells.num_sides(i,data.cells.selected(i,:));';
% SEGGA_default_cmaps = build_SEGGA_default_cmaps(SEGGA_default_cmaps,name,ncolors,discrete_bool,mapped_numbers,...
%                                 colorInput,cbar_txt,contin_val_expr,xticklabels,expr_input);

%%% 9. Neighbors Lost                       
ncolors = 5;
mapped_numbers = [0,1,2,3,4];
colorInput = [0.5   0   1;
              0     0.4 1;
              0     1   0.1;
              0.875 1   0;
              1     0   0];
cbar_txt = 'Neighbors Lost';
contin_val_expr = '[];';
name = 'NLost';
discrete_bool = true;
xticklabels = {num2str((0:4)')};
SEGGA_default_cmaps = build_SEGGA_default_cmaps(SEGGA_default_cmaps,name,ncolors,discrete_bool,mapped_numbers,...
                                colorInput,cbar_txt,contin_val_expr,xticklabels);
% display(SEGGA_default_cmaps);

%%% 9. Cell Orientation
ncolors = 9;
contin_val_expr = '0:0.01:1';
name = 'Cell Orientation';
discrete_bool = false;
colorInput = [0 0 255;
              0 0 82;
              0 0 0;
              38 38 0;
              255 255 0;
              38 38 0;
              0 0 0;
              0 0 82;
              0 0 255]./255;
cbar_txt = 'Cell Orientation';
xticklabels = {'0->','90','<-180'};
outside_loop_expr = [...
'for i = 1:length(seq.frames)',...
    'geom = seq.frames(i).cellgeom;',...
    'l_cells = nonzeros(seq.cells_map(i, data.cells.selected(i, :)));',...
	'faces = geom.faces(l_cells, :);',...
    'faces_for_area = faces2ffa(faces);',...
    '[cell_L1, cell_L2, cell_angle, ~] = cell_ellipse(geom.nodes, faces_for_area);',...           
    'ecc = realsqrt(1 - (cell_L2 ./ cell_L1).^2);',...
    'perframe(i).angle = cell_angle;',...
    'perframe(i).ecc = ecc;',...
'end;',...
'angle_all = [];',...
'ecc_all = [];',...
'for i = 1:length(seq.frames) ',...
    'angle_all = [angle_all;perframe(i).angle];',...
    'ecc_all = [ecc_all;perframe(i).ecc];',...
'end;',...
'minnum = 0;',...
'maxnum = 180;',...
'intrval = (maxnum-minnum)/100;',...
'minnum_ecc = 0;',...
'maxnum_ecc = mean(ecc_all(:))+2*std(ecc_all(:));',...
'intrval_ecc = (maxnum_ecc-minnum_ecc)/100;'...
];
expr_input = ['cell_cdata = min(max(round((perframe(i).angle-',...
               'minnum)/intrval),1),numel(continuous_vals));',...
               'cell_adata = min(max(round((perframe(i).ecc-',...
               'minnum_ecc)/intrval_ecc),1),numel(continuous_vals));'];

alpha_value = 0.4;
cmap_style = 'cubic';
SEGGA_default_cmaps = build_SEGGA_default_cmaps(SEGGA_default_cmaps,name,ncolors,discrete_bool,mapped_numbers,...
                                colorInput,cbar_txt,contin_val_expr,xticklabels,...
                                expr_input,outside_loop_expr,alpha_value,cmap_style);


% savename = [base_dir,filesep,'SEGGA_default_cmaps'];
save(savename,'SEGGA_default_cmaps');  

% return
visualize_multiple_colmaps(savename)


function SEGGA_default_cmaps = build_SEGGA_default_cmaps(SEGGA_default_cmaps,name,ncolors,discrete_bool,mapped_numbers,...
                                colorInput,cbar_txt,contin_val_expr,xticklabels,...
                                expr_input,outside_loop_expr,alpha_value,cmap_style)
ind = length(SEGGA_default_cmaps)+1;
SEGGA_default_cmaps(ind).name = name;
SEGGA_default_cmaps(ind).ncolors = ncolors;
SEGGA_default_cmaps(ind).discrete_bool = discrete_bool;
SEGGA_default_cmaps(ind).mapped_numbers = mapped_numbers;

SEGGA_default_cmaps(ind).callingfig = [];
SEGGA_default_cmaps(ind).handles = [];

SEGGA_default_cmaps(ind).colorInput = colorInput;
SEGGA_default_cmaps(ind).cbar_txt = cbar_txt;
SEGGA_default_cmaps(ind).contin_val_expr = contin_val_expr;

if nargin > 7
    eval(['SEGGA_default_cmaps(ind).continuous_vals = ',contin_val_expr,';']);
else
    SEGGA_default_cmaps(ind).continuous_vals = [];
end

if nargin > 8
    SEGGA_default_cmaps(ind).xticklabels = xticklabels;
else
    SEGGA_default_cmaps(ind).xticklabels = {'min','max'};
end
if nargin > 9
    SEGGA_default_cmaps(ind).expr_input = expr_input;
else
    SEGGA_default_cmaps(ind).expr_input = [];
end
if nargin > 10      
    SEGGA_default_cmaps(ind).outside_loop_expr = outside_loop_expr;
else
    SEGGA_default_cmaps(ind).outside_loop_expr = [];
end

if nargin < 12
    SEGGA_default_cmaps(ind).alpha = 0.5;
else    
    SEGGA_default_cmaps(ind).alpha = alpha_value;
end

if nargin < 13
    SEGGA_default_cmaps(ind).style = 'linear';
else
	SEGGA_default_cmaps(ind).style = cmap_style;
end

if ~discrete_bool && nargin > 7
    m = numel(SEGGA_default_cmaps(ind).continuous_vals);
    interp = SEGGA_default_cmaps(ind).style; 
    if m ~= size(colorInput, 1)
        xi = linspace(1, size(colorInput, 1), m);
        cm = interp1(colorInput, xi, interp);
        SEGGA_default_cmaps(ind).contin_cmap = cm;
    else
        SEGGA_default_cmaps(ind).contin_cmap = colorInput;
    end    
end
